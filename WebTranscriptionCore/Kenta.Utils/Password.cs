using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Kenta.Utils.Data;

namespace Kenta.Utils {
	public struct Password : IFormattable, IComparable, IComparable<Password>, IEquatable<Password>, IConvertible, ISqlMapped, ISerializationMapped {

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		private const Int32 SIZE = 20;

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		private Byte[] bits;

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public Password(String value) {
			if (String.IsNullOrWhiteSpace(value)) throw new ArgumentNullException("value");
			//if (value.Length < 8) throw new ArgumentException("Valor deve ter pelo menos 8 caracteres");
			this.bits = SecurityUtils.SHA1(value + " Kenta Password Base Salt", Encoding.UTF8).Data;
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public override Boolean Equals(Object obj) {
			if (!(obj is Password)) return false;
			return ((IEquatable<Password>)this).Equals(obj);
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public override Int32 GetHashCode() {
			UInt32 x = 0;
			for (Int32 i = 0; i < this.bits.Length; i++) {
				x = (x << 5) | this.bits[i];
			}//for
			return (Int32)x;
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public override String ToString() {
			return this.bits.ToHexDecimal();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#region IFormattable Members
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		String IFormattable.ToString(String format, IFormatProvider formatProvider) {
			return this.bits.ToHexDecimal();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#endregion
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#region IComparable Members
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		Int32 IComparable.CompareTo(Object obj) {
			if (Object.ReferenceEquals(obj, null)) return 1;
			if (!(obj is Password)) throw new ArgumentException("value is not a Password");
			return ((IComparable<Password>)this).CompareTo((Password)obj);
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#endregion
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#region IComparable<Password> Members
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		Int32 IComparable<Password>.CompareTo(Password other) {
			Int32 x = this.bits.Length.CompareTo(other.bits.Length);
			if (x != 0) return x;
			for (Int32 i = 0; i < this.bits.Length; i++) {
				x = this.bits[i].CompareTo(other.bits[i]);
				if (x != 0) return x;
			}//for
			return 0;
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#endregion
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#region IEquatable<BinaryData> Members
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		bool IEquatable<Password>.Equals(Password other) {
			if (Object.ReferenceEquals(this.bits, other.bits)) return true;
			if (this.bits.Length != other.bits.Length) return false;
			for (Int32 i = 0; i < this.bits.Length; i++) {
				if (this.bits[i] != other.bits[i]) return false;
			}//for
			return true;
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#endregion
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#region ISqlMapped
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		Object ISqlMapped.GetValueForDbParameter(DatabaseType type) {
			return this.bits;
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#endregion
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#region ISerializationMapped
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		object ISerializationMapped.GetSerializatedObject() {
			return this.bits;
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#endregion
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#region IConvertible
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		TypeCode IConvertible.GetTypeCode() {
			return TypeCode.Object;
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		bool IConvertible.ToBoolean(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		byte IConvertible.ToByte(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		char IConvertible.ToChar(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		DateTime IConvertible.ToDateTime(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		decimal IConvertible.ToDecimal(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		double IConvertible.ToDouble(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		short IConvertible.ToInt16(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		int IConvertible.ToInt32(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		long IConvertible.ToInt64(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		sbyte IConvertible.ToSByte(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		float IConvertible.ToSingle(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		string IConvertible.ToString(IFormatProvider provider) {
			return this.bits.ToHexDecimal();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		object IConvertible.ToType(Type conversionType, IFormatProvider provider) {
			if (conversionType == typeof(Byte[])) return this.bits;
			if (conversionType == typeof(String)) return this.bits.ToHexDecimal();
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		ushort IConvertible.ToUInt16(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		uint IConvertible.ToUInt32(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		ulong IConvertible.ToUInt64(IFormatProvider provider) {
			throw new InvalidCastException();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//
		#endregion
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public static Boolean operator ==(Password b1, Password b2) {
			return ((IEquatable<Password>)b1).Equals(b2);
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public static Boolean operator !=(Password b1, Password b2) {
			return !((IEquatable<Password>)b1).Equals(b2);
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public static explicit operator Byte[](Password value) {
			return value != null ? value.bits : null;
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public static explicit operator Password(Byte[] value) {
			if (value != null && value.Length != SIZE) throw new ArgumentException("Invalid value length");
			return new Password() { bits = value };
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public static explicit operator Password?(Byte[] value) {
			if (value == null) return null;
			if (value.Length != SIZE) throw new ArgumentException("Invalid value length");
			return new Password() { bits = value };
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public static explicit operator String(Password value) {
			return value.bits.ToHexDecimal();
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

		public static explicit operator Password(String value) {
			if (value != null && value.Length != (SIZE * 2)) throw new ArgumentException("Invalid value length");
			Byte[] bits = null;
			if (value != null) bits = BinaryData.FromHexDecimal(value).Data;
			return new Password() { bits = bits };
		}

		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

	}

}
